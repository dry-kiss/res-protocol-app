/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface UnderwriteManagerInterface extends ethers.utils.Interface {
  functions: {
    "MWEI()": FunctionFragment;
    "activate()": FunctionFragment;
    "addNetwork(address)": FunctionFragment;
    "calculateCollateral(uint256)": FunctionFragment;
    "calculateCredit(uint256)": FunctionFragment;
    "claimRewards(address[])": FunctionFragment;
    "collateralBasisPoints()": FunctionFragment;
    "collateralPriceCents()": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "creditLineExpiration()": FunctionFragment;
    "creditLineRenewalOffset()": FunctionFragment;
    "creditLines(address)": FunctionFragment;
    "deactivate()": FunctionFragment;
    "extendCreditLine(address,uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isActive()": FunctionFragment;
    "minimumCollateral()": FunctionFragment;
    "networkContracts(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeNetwork(address)": FunctionFragment;
    "renewCreditLine(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardPercent()": FunctionFragment;
    "totalCollateral()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "tryUpdateReward(address,uint256)": FunctionFragment;
    "underwriteCreditLine(address,uint256,address)": FunctionFragment;
    "underwriters(address)": FunctionFragment;
    "updateCollateralBP(uint256)": FunctionFragment;
    "updateCollateralPriceCents(uint256)": FunctionFragment;
    "updateCreditLineExpiration(uint256)": FunctionFragment;
    "updateCreditLineRenewalOffset(uint256)": FunctionFragment;
    "updateMinimumCollateral(uint256)": FunctionFragment;
    "updateRewardPercent(uint256)": FunctionFragment;
    "updateUnderwriters(address[],bool[])": FunctionFragment;
    "withdrawCreditLine(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "MWEI", values?: undefined): string;
  encodeFunctionData(functionFragment: "activate", values?: undefined): string;
  encodeFunctionData(functionFragment: "addNetwork", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calculateCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCredit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPriceCents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditLineExpiration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditLineRenewalOffset",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "creditLines", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deactivate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extendCreditLine",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "networkContracts",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeNetwork",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renewCreditLine",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tryUpdateReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underwriteCreditLine",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "underwriters",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateralBP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateralPriceCents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCreditLineExpiration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCreditLineRenewalOffset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinimumCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUnderwriters",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCreditLine",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "MWEI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addNetwork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralPriceCents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditLineExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditLineRenewalOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditLines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deactivate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extendCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryUpdateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underwriteCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underwriters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateralBP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateralPriceCents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCreditLineExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCreditLineRenewalOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinimumCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUnderwriters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCreditLine",
    data: BytesLike
  ): Result;

  events: {
    "CreditLineReward(tuple)": EventFragment;
    "CreditLineRewardClaimed(address,address[],uint256[],uint256)": EventFragment;
    "CreditLineWithdrawal(tuple)": EventFragment;
    "ExtendCreditLine(tuple,uint256)": EventFragment;
    "NewCreditLine(tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreditLineReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditLineRewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditLineWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtendCreditLine"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCreditLine"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class UnderwriteManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UnderwriteManagerInterface;

  functions: {
    MWEI(overrides?: CallOverrides): Promise<[BigNumber]>;

    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addNetwork(
      networkAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateCollateral(
      creditAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateCredit(
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimRewards(
      counterparties: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateralBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralPriceCents(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    creditLineExpiration(overrides?: CallOverrides): Promise<[BigNumber]>;

    creditLineRenewalOffset(overrides?: CallOverrides): Promise<[BigNumber]>;

    creditLines(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, BigNumber] & {
        underwriter: string;
        collateral: BigNumber;
        networkToken: string;
        issueDate: BigNumber;
        reward: BigNumber;
      }
    >;

    deactivate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extendCreditLine(
      counterparty: string,
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      collateralTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    minimumCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    networkContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeNetwork(
      networkAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renewCreditLine(
      counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tryUpdateReward(
      counterparty: string,
      txAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underwriteCreditLine(
      networkToken: string,
      collateralAmount: BigNumberish,
      counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underwriters(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    updateCollateralBP(
      _collateralBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCollateralPriceCents(
      _collateralPriceCents: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCreditLineExpiration(
      _creditLineExpiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCreditLineRenewalOffset(
      _creditLineRenewalOffset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMinimumCollateral(
      _minimumCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRewardPercent(
      _rewardPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUnderwriters(
      _underwriters: string[],
      isUnderwriter: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCreditLine(
      counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MWEI(overrides?: CallOverrides): Promise<BigNumber>;

  activate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addNetwork(
    networkAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateCollateral(
    creditAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateCredit(
    collateralAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimRewards(
    counterparties: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateralBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  collateralPriceCents(overrides?: CallOverrides): Promise<BigNumber>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  creditLineExpiration(overrides?: CallOverrides): Promise<BigNumber>;

  creditLineRenewalOffset(overrides?: CallOverrides): Promise<BigNumber>;

  creditLines(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber, BigNumber] & {
      underwriter: string;
      collateral: BigNumber;
      networkToken: string;
      issueDate: BigNumber;
      reward: BigNumber;
    }
  >;

  deactivate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extendCreditLine(
    counterparty: string,
    collateralAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    collateralTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  minimumCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  networkContracts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeNetwork(
    networkAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renewCreditLine(
    counterparty: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPercent(overrides?: CallOverrides): Promise<BigNumber>;

  totalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tryUpdateReward(
    counterparty: string,
    txAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underwriteCreditLine(
    networkToken: string,
    collateralAmount: BigNumberish,
    counterparty: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underwriters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  updateCollateralBP(
    _collateralBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCollateralPriceCents(
    _collateralPriceCents: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCreditLineExpiration(
    _creditLineExpiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCreditLineRenewalOffset(
    _creditLineRenewalOffset: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMinimumCollateral(
    _minimumCollateral: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRewardPercent(
    _rewardPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUnderwriters(
    _underwriters: string[],
    isUnderwriter: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCreditLine(
    counterparty: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MWEI(overrides?: CallOverrides): Promise<BigNumber>;

    activate(overrides?: CallOverrides): Promise<void>;

    addNetwork(
      networkAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateCollateral(
      creditAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateCredit(
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      counterparties: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    collateralBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    collateralPriceCents(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    creditLineExpiration(overrides?: CallOverrides): Promise<BigNumber>;

    creditLineRenewalOffset(overrides?: CallOverrides): Promise<BigNumber>;

    creditLines(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, BigNumber] & {
        underwriter: string;
        collateral: BigNumber;
        networkToken: string;
        issueDate: BigNumber;
        reward: BigNumber;
      }
    >;

    deactivate(overrides?: CallOverrides): Promise<void>;

    extendCreditLine(
      counterparty: string,
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      collateralTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    minimumCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    networkContracts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeNetwork(
      networkAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renewCreditLine(
      counterparty: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardPercent(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tryUpdateReward(
      counterparty: string,
      txAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    underwriteCreditLine(
      networkToken: string,
      collateralAmount: BigNumberish,
      counterparty: string,
      overrides?: CallOverrides
    ): Promise<void>;

    underwriters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    updateCollateralBP(
      _collateralBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCollateralPriceCents(
      _collateralPriceCents: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCreditLineExpiration(
      _creditLineExpiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCreditLineRenewalOffset(
      _creditLineRenewalOffset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinimumCollateral(
      _minimumCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardPercent(
      _rewardPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUnderwriters(
      _underwriters: string[],
      isUnderwriter: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCreditLine(
      counterparty: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CreditLineReward(
      creditLine?: null
    ): TypedEventFilter<
      [
        [
          string,
          string,
          [string, BigNumber, string, BigNumber, BigNumber] & {
            underwriter: string;
            collateral: BigNumber;
            networkToken: string;
            issueDate: BigNumber;
            reward: BigNumber;
          }
        ] & {
          underwriter: string;
          counterparty: string;
          data: [string, BigNumber, string, BigNumber, BigNumber] & {
            underwriter: string;
            collateral: BigNumber;
            networkToken: string;
            issueDate: BigNumber;
            reward: BigNumber;
          };
        }
      ],
      {
        creditLine: [
          string,
          string,
          [string, BigNumber, string, BigNumber, BigNumber] & {
            underwriter: string;
            collateral: BigNumber;
            networkToken: string;
            issueDate: BigNumber;
            reward: BigNumber;
          }
        ] & {
          underwriter: string;
          counterparty: string;
          data: [string, BigNumber, string, BigNumber, BigNumber] & {
            underwriter: string;
            collateral: BigNumber;
            networkToken: string;
            issueDate: BigNumber;
            reward: BigNumber;
          };
        };
      }
    >;

    CreditLineRewardClaimed(
      underwriter?: null,
      counterparties?: null,
      rewards?: null,
      totalClaimed?: null
    ): TypedEventFilter<
      [string, string[], BigNumber[], BigNumber],
      {
        underwriter: string;
        counterparties: string[];
        rewards: BigNumber[];
        totalClaimed: BigNumber;
      }
    >;

    CreditLineWithdrawal(
      creditLine?: null
    ): TypedEventFilter<
      [
        [
          string,
          string,
          [string, BigNumber, string, BigNumber, BigNumber] & {
            underwriter: string;
            collateral: BigNumber;
            networkToken: string;
            issueDate: BigNumber;
            reward: BigNumber;
          },
          BigNumber
        ] & {
          underwriter: string;
          counterparty: string;
          data: [string, BigNumber, string, BigNumber, BigNumber] & {
            underwriter: string;
            collateral: BigNumber;
            networkToken: string;
            issueDate: BigNumber;
            reward: BigNumber;
          };
          creditLimit: BigNumber;
        }
      ],
      {
        creditLine: [
          string,
          string,
          [string, BigNumber, string, BigNumber, BigNumber] & {
            underwriter: string;
            collateral: BigNumber;
            networkToken: string;
            issueDate: BigNumber;
            reward: BigNumber;
          },
          BigNumber
        ] & {
          underwriter: string;
          counterparty: string;
          data: [string, BigNumber, string, BigNumber, BigNumber] & {
            underwriter: string;
            collateral: BigNumber;
            networkToken: string;
            issueDate: BigNumber;
            reward: BigNumber;
          };
          creditLimit: BigNumber;
        };
      }
    >;

    ExtendCreditLine(
      creditLine?: null,
      additionalCollateral?: null
    ): TypedEventFilter<
      [
        [
          string,
          string,
          [string, BigNumber, string, BigNumber, BigNumber] & {
            underwriter: string;
            collateral: BigNumber;
            networkToken: string;
            issueDate: BigNumber;
            reward: BigNumber;
          },
          BigNumber
        ] & {
          underwriter: string;
          counterparty: string;
          data: [string, BigNumber, string, BigNumber, BigNumber] & {
            underwriter: string;
            collateral: BigNumber;
            networkToken: string;
            issueDate: BigNumber;
            reward: BigNumber;
          };
          creditLimit: BigNumber;
        },
        BigNumber
      ],
      {
        creditLine: [
          string,
          string,
          [string, BigNumber, string, BigNumber, BigNumber] & {
            underwriter: string;
            collateral: BigNumber;
            networkToken: string;
            issueDate: BigNumber;
            reward: BigNumber;
          },
          BigNumber
        ] & {
          underwriter: string;
          counterparty: string;
          data: [string, BigNumber, string, BigNumber, BigNumber] & {
            underwriter: string;
            collateral: BigNumber;
            networkToken: string;
            issueDate: BigNumber;
            reward: BigNumber;
          };
          creditLimit: BigNumber;
        };
        additionalCollateral: BigNumber;
      }
    >;

    NewCreditLine(
      creditLine?: null
    ): TypedEventFilter<
      [
        [
          string,
          string,
          [string, BigNumber, string, BigNumber, BigNumber] & {
            underwriter: string;
            collateral: BigNumber;
            networkToken: string;
            issueDate: BigNumber;
            reward: BigNumber;
          },
          BigNumber
        ] & {
          underwriter: string;
          counterparty: string;
          data: [string, BigNumber, string, BigNumber, BigNumber] & {
            underwriter: string;
            collateral: BigNumber;
            networkToken: string;
            issueDate: BigNumber;
            reward: BigNumber;
          };
          creditLimit: BigNumber;
        }
      ],
      {
        creditLine: [
          string,
          string,
          [string, BigNumber, string, BigNumber, BigNumber] & {
            underwriter: string;
            collateral: BigNumber;
            networkToken: string;
            issueDate: BigNumber;
            reward: BigNumber;
          },
          BigNumber
        ] & {
          underwriter: string;
          counterparty: string;
          data: [string, BigNumber, string, BigNumber, BigNumber] & {
            underwriter: string;
            collateral: BigNumber;
            networkToken: string;
            issueDate: BigNumber;
            reward: BigNumber;
          };
          creditLimit: BigNumber;
        };
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    MWEI(overrides?: CallOverrides): Promise<BigNumber>;

    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addNetwork(
      networkAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateCollateral(
      creditAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateCredit(
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      counterparties: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateralBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    collateralPriceCents(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    creditLineExpiration(overrides?: CallOverrides): Promise<BigNumber>;

    creditLineRenewalOffset(overrides?: CallOverrides): Promise<BigNumber>;

    creditLines(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deactivate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extendCreditLine(
      counterparty: string,
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      collateralTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    minimumCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    networkContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeNetwork(
      networkAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renewCreditLine(
      counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPercent(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tryUpdateReward(
      counterparty: string,
      txAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underwriteCreditLine(
      networkToken: string,
      collateralAmount: BigNumberish,
      counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underwriters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateCollateralBP(
      _collateralBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCollateralPriceCents(
      _collateralPriceCents: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCreditLineExpiration(
      _creditLineExpiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCreditLineRenewalOffset(
      _creditLineRenewalOffset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMinimumCollateral(
      _minimumCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRewardPercent(
      _rewardPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUnderwriters(
      _underwriters: string[],
      isUnderwriter: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCreditLine(
      counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MWEI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addNetwork(
      networkAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateCollateral(
      creditAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateCredit(
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      counterparties: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateralBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralPriceCents(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditLineExpiration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditLineRenewalOffset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditLines(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deactivate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extendCreditLine(
      counterparty: string,
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      collateralTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    networkContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeNetwork(
      networkAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renewCreditLine(
      counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tryUpdateReward(
      counterparty: string,
      txAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underwriteCreditLine(
      networkToken: string,
      collateralAmount: BigNumberish,
      counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underwriters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCollateralBP(
      _collateralBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCollateralPriceCents(
      _collateralPriceCents: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCreditLineExpiration(
      _creditLineExpiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCreditLineRenewalOffset(
      _creditLineRenewalOffset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMinimumCollateral(
      _minimumCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardPercent(
      _rewardPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUnderwriters(
      _underwriters: string[],
      isUnderwriter: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCreditLine(
      counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
