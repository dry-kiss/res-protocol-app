/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IUnderwriteManagerInterface extends ethers.utils.Interface {
  functions: {
    "activate()": FunctionFragment;
    "addNetwork(address)": FunctionFragment;
    "claimRewards(address[])": FunctionFragment;
    "deactivate()": FunctionFragment;
    "extendCreditLine(address,uint256)": FunctionFragment;
    "removeNetwork(address)": FunctionFragment;
    "renewCreditLine(address)": FunctionFragment;
    "tryUpdateReward(address,uint256)": FunctionFragment;
    "underwriteCreditLine(address,uint256,address)": FunctionFragment;
    "updateUnderwriters(address[],bool[])": FunctionFragment;
    "withdrawCreditLine(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "activate", values?: undefined): string;
  encodeFunctionData(functionFragment: "addNetwork", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extendCreditLine",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeNetwork",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renewCreditLine",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tryUpdateReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underwriteCreditLine",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUnderwriters",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCreditLine",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addNetwork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deactivate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extendCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryUpdateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underwriteCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUnderwriters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCreditLine",
    data: BytesLike
  ): Result;

  events: {};
}

export class IUnderwriteManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IUnderwriteManagerInterface;

  functions: {
    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addNetwork(
      networkAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      counterparties: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deactivate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extendCreditLine(
      counterparty: string,
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeNetwork(
      networkAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renewCreditLine(
      counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tryUpdateReward(
      counterparty: string,
      txAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underwriteCreditLine(
      networkToken: string,
      collateralAmount: BigNumberish,
      counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUnderwriters(
      _underwriters: string[],
      isUnderwriter: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCreditLine(
      counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addNetwork(
    networkAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    counterparties: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deactivate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extendCreditLine(
    counterparty: string,
    collateralAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeNetwork(
    networkAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renewCreditLine(
    counterparty: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tryUpdateReward(
    counterparty: string,
    txAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underwriteCreditLine(
    networkToken: string,
    collateralAmount: BigNumberish,
    counterparty: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUnderwriters(
    _underwriters: string[],
    isUnderwriter: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCreditLine(
    counterparty: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activate(overrides?: CallOverrides): Promise<void>;

    addNetwork(
      networkAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      counterparties: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    deactivate(overrides?: CallOverrides): Promise<void>;

    extendCreditLine(
      counterparty: string,
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeNetwork(
      networkAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renewCreditLine(
      counterparty: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tryUpdateReward(
      counterparty: string,
      txAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    underwriteCreditLine(
      networkToken: string,
      collateralAmount: BigNumberish,
      counterparty: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUnderwriters(
      _underwriters: string[],
      isUnderwriter: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCreditLine(
      counterparty: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addNetwork(
      networkAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewards(
      counterparties: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deactivate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extendCreditLine(
      counterparty: string,
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeNetwork(
      networkAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renewCreditLine(
      counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tryUpdateReward(
      counterparty: string,
      txAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underwriteCreditLine(
      networkToken: string,
      collateralAmount: BigNumberish,
      counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUnderwriters(
      _underwriters: string[],
      isUnderwriter: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCreditLine(
      counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addNetwork(
      networkAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      counterparties: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deactivate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extendCreditLine(
      counterparty: string,
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeNetwork(
      networkAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renewCreditLine(
      counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tryUpdateReward(
      counterparty: string,
      txAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underwriteCreditLine(
      networkToken: string,
      collateralAmount: BigNumberish,
      counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUnderwriters(
      _underwriters: string[],
      isUnderwriter: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCreditLine(
      counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
