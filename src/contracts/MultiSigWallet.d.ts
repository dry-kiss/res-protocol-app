/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MultiSigWalletInterface extends ethers.utils.Interface {
  functions: {
    "MAX_OWNER_COUNT()": FunctionFragment;
    "addOwner(address)": FunctionFragment;
    "changeRequirement(uint256)": FunctionFragment;
    "confirmTransactionByRelay(uint256,bytes,address)": FunctionFragment;
    "confirmations(uint256,address)": FunctionFragment;
    "executeTransactionByRelay(uint256,bytes,address)": FunctionFragment;
    "getConfirmationCount(uint256)": FunctionFragment;
    "getConfirmations(uint256)": FunctionFragment;
    "getOwners()": FunctionFragment;
    "getTransactionCount(bool,bool)": FunctionFragment;
    "getTransactionIds(uint256,uint256,bool,bool)": FunctionFragment;
    "initialize(address[],uint256)": FunctionFragment;
    "isConfirmed(uint256)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "owners(uint256)": FunctionFragment;
    "prepareConfirmTransaction(uint256,uint256)": FunctionFragment;
    "prepareExecuteTransaction(uint256,uint256)": FunctionFragment;
    "prepareRevokeConfirmation(uint256,uint256)": FunctionFragment;
    "prepareSubmitTransaction(address,uint256,bytes,uint256)": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "replaceOwner(address,address)": FunctionFragment;
    "required()": FunctionFragment;
    "revokeConfirmationByRelay(uint256,bytes,address)": FunctionFragment;
    "submitTransactionByRelay(address,uint256,bytes,bytes,address)": FunctionFragment;
    "transactionCount()": FunctionFragment;
    "transactions(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_OWNER_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeRequirement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransactionByRelay",
    values: [BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmations",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransactionByRelay",
    values: [BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfirmationCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfirmations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTransactionCount",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionIds",
    values: [BigNumberish, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isConfirmed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareConfirmTransaction",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareExecuteTransaction",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareRevokeConfirmation",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareSubmitTransaction",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "removeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replaceOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "required", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revokeConfirmationByRelay",
    values: [BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTransactionByRelay",
    values: [string, BigNumberish, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_OWNER_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransactionByRelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransactionByRelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareConfirmTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareExecuteTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareRevokeConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareSubmitTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "required", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeConfirmationByRelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTransactionByRelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Confirmation(address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "Execution(uint256)": EventFragment;
    "ExecutionFailure(uint256)": EventFragment;
    "OwnerAddition(address)": EventFragment;
    "OwnerRemoval(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequirementChange(uint256)": EventFragment;
    "Revocation(address,uint256)": EventFragment;
    "Submission(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Confirmation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Execution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerRemoval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequirementChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revocation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Submission"): EventFragment;
}

export class MultiSigWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MultiSigWalletInterface;

  functions: {
    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    addOwner(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRequirement(
      _required: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    confirmTransactionByRelay(
      transactionId: BigNumberish,
      sig: BytesLike,
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    executeTransactionByRelay(
      transactionId: BigNumberish,
      sig: BytesLike,
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getConfirmations(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _confirmations: string[] }>;

    getOwners(overrides?: CallOverrides): Promise<[string[]]>;

    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _transactionIds: BigNumber[] }>;

    initialize(
      _owners: string[],
      _required: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isConfirmed(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    prepareConfirmTransaction(
      transactionId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    prepareExecuteTransaction(
      transactionId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    prepareRevokeConfirmation(
      transactionId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    prepareSubmitTransaction(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeOwner(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    replaceOwner(
      owner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    required(overrides?: CallOverrides): Promise<[BigNumber]>;

    revokeConfirmationByRelay(
      transactionId: BigNumberish,
      sig: BytesLike,
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitTransactionByRelay(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      sig: BytesLike,
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transactionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean] & {
        destination: string;
        value: BigNumber;
        data: string;
        executed: boolean;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

  addOwner(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRequirement(
    _required: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  confirmTransactionByRelay(
    transactionId: BigNumberish,
    sig: BytesLike,
    signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  confirmations(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  executeTransactionByRelay(
    transactionId: BigNumberish,
    sig: BytesLike,
    signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getConfirmationCount(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getConfirmations(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getOwners(overrides?: CallOverrides): Promise<string[]>;

  getTransactionCount(
    pending: boolean,
    executed: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTransactionIds(
    from: BigNumberish,
    to: BigNumberish,
    pending: boolean,
    executed: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  initialize(
    _owners: string[],
    _required: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isConfirmed(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  prepareConfirmTransaction(
    transactionId: BigNumberish,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  prepareExecuteTransaction(
    transactionId: BigNumberish,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  prepareRevokeConfirmation(
    transactionId: BigNumberish,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  prepareSubmitTransaction(
    destination: string,
    value: BigNumberish,
    data: BytesLike,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  removeOwner(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  replaceOwner(
    owner: string,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  required(overrides?: CallOverrides): Promise<BigNumber>;

  revokeConfirmationByRelay(
    transactionId: BigNumberish,
    sig: BytesLike,
    signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitTransactionByRelay(
    destination: string,
    value: BigNumberish,
    data: BytesLike,
    sig: BytesLike,
    signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

  transactions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, boolean] & {
      destination: string;
      value: BigNumber;
      data: string;
      executed: boolean;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    addOwner(owner: string, overrides?: CallOverrides): Promise<void>;

    changeRequirement(
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmTransactionByRelay(
      transactionId: BigNumberish,
      sig: BytesLike,
      signer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeTransactionByRelay(
      transactionId: BigNumberish,
      sig: BytesLike,
      signer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfirmations(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getOwners(overrides?: CallOverrides): Promise<string[]>;

    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    initialize(
      _owners: string[],
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isConfirmed(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    prepareConfirmTransaction(
      transactionId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    prepareExecuteTransaction(
      transactionId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    prepareRevokeConfirmation(
      transactionId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    prepareSubmitTransaction(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    removeOwner(owner: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    replaceOwner(
      owner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    required(overrides?: CallOverrides): Promise<BigNumber>;

    revokeConfirmationByRelay(
      transactionId: BigNumberish,
      sig: BytesLike,
      signer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTransactionByRelay(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      sig: BytesLike,
      signer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean] & {
        destination: string;
        value: BigNumber;
        data: string;
        executed: boolean;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Confirmation(
      sender?: string | null,
      transactionId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; transactionId: BigNumber }
    >;

    Deposit(
      sender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; value: BigNumber }
    >;

    Execution(
      transactionId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { transactionId: BigNumber }>;

    ExecutionFailure(
      transactionId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { transactionId: BigNumber }>;

    OwnerAddition(
      owner?: string | null
    ): TypedEventFilter<[string], { owner: string }>;

    OwnerRemoval(
      owner?: string | null
    ): TypedEventFilter<[string], { owner: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RequirementChange(
      required?: null
    ): TypedEventFilter<[BigNumber], { required: BigNumber }>;

    Revocation(
      sender?: string | null,
      transactionId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; transactionId: BigNumber }
    >;

    Submission(
      transactionId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { transactionId: BigNumber }>;
  };

  estimateGas: {
    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    addOwner(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRequirement(
      _required: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    confirmTransactionByRelay(
      transactionId: BigNumberish,
      sig: BytesLike,
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeTransactionByRelay(
      transactionId: BigNumberish,
      sig: BytesLike,
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfirmations(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwners(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owners: string[],
      _required: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isConfirmed(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    prepareConfirmTransaction(
      transactionId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepareExecuteTransaction(
      transactionId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepareRevokeConfirmation(
      transactionId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepareSubmitTransaction(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeOwner(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    replaceOwner(
      owner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    required(overrides?: CallOverrides): Promise<BigNumber>;

    revokeConfirmationByRelay(
      transactionId: BigNumberish,
      sig: BytesLike,
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitTransactionByRelay(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      sig: BytesLike,
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addOwner(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRequirement(
      _required: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    confirmTransactionByRelay(
      transactionId: BigNumberish,
      sig: BytesLike,
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeTransactionByRelay(
      transactionId: BigNumberish,
      sig: BytesLike,
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfirmations(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owners: string[],
      _required: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isConfirmed(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prepareConfirmTransaction(
      transactionId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prepareExecuteTransaction(
      transactionId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prepareRevokeConfirmation(
      transactionId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prepareSubmitTransaction(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeOwner(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    replaceOwner(
      owner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    required(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeConfirmationByRelay(
      transactionId: BigNumberish,
      sig: BytesLike,
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitTransactionByRelay(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      sig: BytesLike,
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transactionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
